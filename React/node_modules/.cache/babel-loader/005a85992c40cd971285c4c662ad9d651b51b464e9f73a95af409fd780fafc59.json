{"ast":null,"code":"import listen from 'dom-helpers/listen';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport { useEffect } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport useClickOutside, { getRefTarget } from './useClickOutside';\nimport { isEscKey } from './utils';\nvar noop = function noop() {};\n/**\r\n * The `useRootClose` hook registers your callback on the document\r\n * when rendered. Powers the `<Overlay/>` component. This is used achieve modal\r\n * style behavior where your callback is triggered when the user tries to\r\n * interact with the rest of the document or hits the `esc` key.\r\n *\r\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\r\n * @param {function} onRootClose\r\n * @param {object=}  options\r\n * @param {boolean=} options.disabled\r\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\r\n */\nfunction useRootClose(ref, onRootClose) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    disabled = _ref.disabled,\n    clickTrigger = _ref.clickTrigger;\n  var onClose = onRootClose || noop;\n  useClickOutside(ref, onClose, {\n    disabled: disabled,\n    clickTrigger: clickTrigger\n  });\n  var handleKeyUp = useEventCallback(function (e) {\n    if (isEscKey(e)) {\n      onClose(e);\n    }\n  });\n  useEffect(function () {\n    if (disabled || ref == null) return undefined;\n    var doc = ownerDocument(getRefTarget(ref));\n\n    // Store the current event to avoid triggering handlers immediately\n    // https://github.com/facebook/react/issues/20074\n    var currentEvent = (doc.defaultView || window).event;\n    var removeKeyupListener = listen(doc, 'keyup', function (e) {\n      // skip if this event is the same as the one running when we added the handlers\n      if (e === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n      handleKeyUp(e);\n    });\n    return function () {\n      removeKeyupListener();\n    };\n  }, [ref, disabled, handleKeyUp]);\n}\nexport default useRootClose;","map":{"version":3,"names":["listen","ownerDocument","useEffect","useEventCallback","useClickOutside","getRefTarget","isEscKey","noop","useRootClose","ref","onRootClose","_ref","arguments","length","undefined","disabled","clickTrigger","onClose","handleKeyUp","e","doc","currentEvent","defaultView","window","event","removeKeyupListener"],"sources":["C:/Users/victo/Documents/GitHub/Projeto_Linos/react/node_modules/@restart/ui/esm/useRootClose.js"],"sourcesContent":["import listen from 'dom-helpers/listen';\r\nimport ownerDocument from 'dom-helpers/ownerDocument';\r\nimport { useEffect } from 'react';\r\nimport useEventCallback from '@restart/hooks/useEventCallback';\r\nimport useClickOutside, { getRefTarget } from './useClickOutside';\r\nimport { isEscKey } from './utils';\r\nconst noop = () => {};\r\n/**\r\n * The `useRootClose` hook registers your callback on the document\r\n * when rendered. Powers the `<Overlay/>` component. This is used achieve modal\r\n * style behavior where your callback is triggered when the user tries to\r\n * interact with the rest of the document or hits the `esc` key.\r\n *\r\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\r\n * @param {function} onRootClose\r\n * @param {object=}  options\r\n * @param {boolean=} options.disabled\r\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\r\n */\r\nfunction useRootClose(ref, onRootClose, {\r\n  disabled,\r\n  clickTrigger\r\n} = {}) {\r\n  const onClose = onRootClose || noop;\r\n  useClickOutside(ref, onClose, {\r\n    disabled,\r\n    clickTrigger\r\n  });\r\n  const handleKeyUp = useEventCallback(e => {\r\n    if (isEscKey(e)) {\r\n      onClose(e);\r\n    }\r\n  });\r\n  useEffect(() => {\r\n    if (disabled || ref == null) return undefined;\r\n    const doc = ownerDocument(getRefTarget(ref));\r\n\r\n    // Store the current event to avoid triggering handlers immediately\r\n    // https://github.com/facebook/react/issues/20074\r\n    let currentEvent = (doc.defaultView || window).event;\r\n    const removeKeyupListener = listen(doc, 'keyup', e => {\r\n      // skip if this event is the same as the one running when we added the handlers\r\n      if (e === currentEvent) {\r\n        currentEvent = undefined;\r\n        return;\r\n      }\r\n      handleKeyUp(e);\r\n    });\r\n    return () => {\r\n      removeKeyupListener();\r\n    };\r\n  }, [ref, disabled, handleKeyUp]);\r\n}\r\nexport default useRootClose;"],"mappings":"AAAA,OAAOA,MAAM,MAAM,oBAAoB;AACvC,OAAOC,aAAa,MAAM,2BAA2B;AACrD,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,gBAAgB,MAAM,iCAAiC;AAC9D,OAAOC,eAAe,IAAIC,YAAY,QAAQ,mBAAmB;AACjE,SAASC,QAAQ,QAAQ,SAAS;AAClC,IAAMC,IAAI,GAAG,SAAPA,IAAIA,CAAA,EAAS,CAAC,CAAC;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAACC,GAAG,EAAEC,WAAW,EAG9B;EAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,CAAC,CAAC;IAFJG,QAAQ,GAAAJ,IAAA,CAARI,QAAQ;IACRC,YAAY,GAAAL,IAAA,CAAZK,YAAY;EAEZ,IAAMC,OAAO,GAAGP,WAAW,IAAIH,IAAI;EACnCH,eAAe,CAACK,GAAG,EAAEQ,OAAO,EAAE;IAC5BF,QAAQ,EAARA,QAAQ;IACRC,YAAY,EAAZA;EACF,CAAC,CAAC;EACF,IAAME,WAAW,GAAGf,gBAAgB,CAAC,UAAAgB,CAAC,EAAI;IACxC,IAAIb,QAAQ,CAACa,CAAC,CAAC,EAAE;MACfF,OAAO,CAACE,CAAC,CAAC;IACZ;EACF,CAAC,CAAC;EACFjB,SAAS,CAAC,YAAM;IACd,IAAIa,QAAQ,IAAIN,GAAG,IAAI,IAAI,EAAE,OAAOK,SAAS;IAC7C,IAAMM,GAAG,GAAGnB,aAAa,CAACI,YAAY,CAACI,GAAG,CAAC,CAAC;;IAE5C;IACA;IACA,IAAIY,YAAY,GAAG,CAACD,GAAG,CAACE,WAAW,IAAIC,MAAM,EAAEC,KAAK;IACpD,IAAMC,mBAAmB,GAAGzB,MAAM,CAACoB,GAAG,EAAE,OAAO,EAAE,UAAAD,CAAC,EAAI;MACpD;MACA,IAAIA,CAAC,KAAKE,YAAY,EAAE;QACtBA,YAAY,GAAGP,SAAS;QACxB;MACF;MACAI,WAAW,CAACC,CAAC,CAAC;IAChB,CAAC,CAAC;IACF,OAAO,YAAM;MACXM,mBAAmB,CAAC,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAAChB,GAAG,EAAEM,QAAQ,EAAEG,WAAW,CAAC,CAAC;AAClC;AACA,eAAeV,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}